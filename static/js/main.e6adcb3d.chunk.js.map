{"version":3,"sources":["assets/chuck.png","serviceWorker.js","components/card/Card.jsx","components/button/Button.jsx","pages/home/Home.js","components/select/Select.jsx","pages/menu/Menu.js","routes.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","title","children","className","Button","onClick","text","icon","Home","id","src","Chuck","alt","to","style","textDecoration","onChange","Menu","useState","joke","setJoke","categoriesList","setCategoriesList","category","setCategory","handleSelectedCategory","e","selectedCategory","target","value","axios","get","then","response","data","useEffect","Select","defaultValue","map","item","key","hidden","Routes","component","path","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6adcb3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck.a3205fec.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Card = ({ title, children }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"title\">\r\n                <h3>{title}</h3>\r\n            </div>\r\n            <div className=\"text-content\">\r\n                <p>{children}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from 'react';\r\nimport './styles.css'\r\n\r\nconst Button = ({ className, onClick, text, icon }) => {\r\n    return (\r\n        <Fragment>\r\n            <button className={className} onClick={onClick}>\r\n                {text &&\r\n                    <strong>{text}</strong>\r\n                }\r\n                {icon &&\r\n                    <span>{icon}</span>\r\n                }\r\n\r\n            </button>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Button;","import React from 'react';\r\nimport Card from '../../components/card/Card.jsx';\r\nimport Button from '../../components/button/Button.jsx';\r\nimport './styles.css';\r\nimport Chuck from '../../assets/chuck.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiLogIn } from 'react-icons/fi';\r\nconst Home = () => {\r\n\r\n    return (\r\n        <>\r\n            <section id=\"container\">\r\n                <div className=\"image-container\">\r\n                    <img className=\"chuck-image\" src={Chuck} alt=\"God\" />\r\n                </div>\r\n                <div id=\"form-container\">\r\n                    <div className=\"card-container\">\r\n                        <Card title=\"Are you ready?\">\r\n                            Welcome to chuck norris jokes api, here you will learn a little bit of all the knowledge that\r\n                            chuck norris has. Enjoy!\r\n                        </Card>\r\n                    </div>\r\n                    <Link to=\"/menu\" style={{textDecoration: 'none'}}>\r\n                    <div className=\"button-container\">\r\n                        <Button className=\"button\" text={'lets go'} icon={<FiLogIn/>}/>\r\n                    </div>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Card = ({ children, onChange }) => {\r\n    return (\r\n        <>\r\n            <select onChange={onChange}>\r\n                {children}\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\r\nimport Card from '../../components/card/Card.jsx';\r\nimport Button from '../../components/button/Button.jsx';\r\nimport Select from '../../components/select/Select.jsx';\r\nimport './styles.css';\r\nimport Chuck from '../../assets/chuck.png';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport { FiArrowRight } from 'react-icons/fi';\r\nconst Menu = () => {\r\n    const [joke, setJoke] = useState(\"If you don't choose fast chuck will kick your ass\");\r\n    const [categoriesList, setCategoriesList] = useState([]);\r\n    const [category, setCategory] = useState(\"Choose one\");\r\n    useEffect(() => {\r\n        axios.get('https://api.chucknorris.io/jokes/categories').then(response => {\r\n            setCategoriesList(response.data);\r\n        })\r\n    }, [categoriesList])\r\n\r\n    function handleSelectedCategory(e) {\r\n        const selectedCategory = e.target.value ? e.target.value : category;\r\n        axios.get(`https://api.chucknorris.io/jokes/random?category=${selectedCategory}`).then(response => {\r\n            setCategory(selectedCategory);\r\n            setJoke(response.data.value);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section id=\"container\">\r\n                <div className=\"image-container\">\r\n                    <img className=\"chuck-image\" src={Chuck} alt=\"God\" />\r\n                </div>\r\n                <div id=\"form-container\">\r\n                    <div className=\"select-container\">\r\n                        <Select onChange={e => handleSelectedCategory(e)}>\r\n                            <option defaultValue>Choose a category</option>\r\n                            {\r\n                                categoriesList.map(item => (\r\n                                    <option key={item} value={item}>{item}</option>\r\n                                ))\r\n\r\n                            }\r\n                        </Select>\r\n                    </div>\r\n\r\n                    <div className=\"card-container\">\r\n                        <Card title={`Category: ${category}`}>\r\n                            {joke}\r\n                        </Card>\r\n                    </div>\r\n\r\n                    <div className=\"button-container\">\r\n                        <Link to=\"/menu\" style={{ textDecoration: 'none' }} hidden={category === \"Choose one\" ? true : false}>\r\n                            <Button className=\"button\" icon={<FiArrowRight />} text={'Next Joke'} onClick={handleSelectedCategory}/>\r\n                        </Link>\r\n                        <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n                            <Button className=\"button\" icon={<FiArrowLeft />} text={'Go home'}/>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\nimport Home from './pages/home/Home';\r\nimport Menu from './pages/menu/Menu';\r\nconst Routes = () => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Route component={Home} path=\"/\" exact />\r\n            <Route component={Menu} path=\"/menu\"/>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}